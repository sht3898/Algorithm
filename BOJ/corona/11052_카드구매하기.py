import sys; sys.stdin = open('11052_input.txt', 'r')

# 구매하는 카드 개수
N = int(input())
# 카드의 리스트, 그대로 입력을 받으면 인덱스0부터 되기 때문에 헷갈릴수 있음
# 인덱스 i일 때를 카드 i개 들어있는 카드팩의 값으로 통일하기 위해
# 0이 들어있는 인덱스에 입력되는 값을 받아 arr로 통일
arr = [0] + list(map(int, input().split()))
# 다이나믹 프로그래밍을 하기 위한 배열 dp를 선언
# dp 배열에서 인덱스 i의 값은 카드의 개수가 0일 떄 최대값을 의미
# 이것도 인덱스가 0부터 시작하면 헷갈릴 수 있기에 N+1을 곱해서 선언
dp = [0] * (N+1)

# 각 인덱스를 순환하면서 현재 인덱스의 값과 현재 개수-더하려는 개수의 인덱스의 값과
# 더하려는 개수의 해당하는 arr 값을 더한 것을 비교하여
# 더 큰 값을 dp의 i번째 인덱스 값으로 저장
for i in range(1, N+1):
    for k in range(1, i+1):
        dp[i] = max(dp[i], dp[i-k] + arr[k])

# 구하고자 하는 N번째 dp 값(N일 때 가장 많은 비용)을 출력
print(dp[N])
